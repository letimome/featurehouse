/* Generated By:JavaCC: Do not edit this line. RParserTokenManager.java */
package tmp.generated_r;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class RParserTokenManager implements RParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjMoveStringLiteralDfa0_12()
{
   return 1;
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 129;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 129;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 127);
      case 13:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_10(0x4000000000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_10(0x800000000000L);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_10(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 34:
         return jjMoveStringLiteralDfa2_10(active1, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa2_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(0, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, 0L, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_10(1, 0L, active1, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_10(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 129)
                     kind = 129;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 129;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x80000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 129;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 127);
      case 13:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_6(0x4000000000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_6(0x80000000000L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 34:
         return jjMoveStringLiteralDfa2_6(active1, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa2_6(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_6(0, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, 0L, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 107);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, 0L, active1, 0L);
}
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 129)
                     kind = 129;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            return 2;
         }
         return -1;
      case 1:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 109);
      case 92:
         return jjMoveStringLiteralDfa1_8(0x40000000000000L);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_8(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_8(active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_8(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_8(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 118);
         break;
      default :
         break;
   }
   return jjStartNfa_8(1, 0L, active1);
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  break;
               case 3:
                  if (curChar == 34 && kind > 125)
                     kind = 125;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 125)
                     kind = 125;
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               case 2:
                  if (curChar == 92 && kind > 125)
                     kind = 125;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 125)
                     kind = 125;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            return 2;
         }
         return -1;
      case 1:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 105);
      case 92:
         return jjMoveStringLiteralDfa1_4(0x4000000000000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_4(active1, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_4(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_4(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 114);
         break;
      default :
         break;
   }
   return jjStartNfa_4(1, 0L, active1);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  break;
               case 3:
                  if (curChar == 34 && kind > 125)
                     kind = 125;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 125)
                     kind = 125;
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               case 2:
                  if (curChar == 92 && kind > 125)
                     kind = 125;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 125)
                     kind = 125;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_11()
{
   return 1;
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 129;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 129;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 127);
      case 13:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_9(0x4000000000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_9(0x400000000000L);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_9(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, 0L, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 39:
         return jjMoveStringLiteralDfa2_9(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_9(0, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa2_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_9(0, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, 0L, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_9(1, 0L, active1, 0L);
}
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 129)
                     kind = 129;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     jjCheckNAddStates(2, 4);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 2:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  jjAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 129;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 129;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 127);
      case 13:
         jjmatchedKind = 128;
         return jjMoveStringLiteralDfa1_5(0x4000000000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_5(0x40000000000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 39:
         return jjMoveStringLiteralDfa2_5(active1, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa2_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(0, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, 0L, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_5(1, 0L, active1, 0L);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 129)
                     kind = 129;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            return 2;
         }
         return -1;
      case 1:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 108);
      case 92:
         return jjMoveStringLiteralDfa1_7(0x10000000000000L);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_7(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_7(active1, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_7(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_7(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_7(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_7(1, 0L, active1);
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 124)
                        kind = 124;
                  }
                  break;
               case 3:
                  if (curChar == 39 && kind > 124)
                     kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 124)
                     kind = 124;
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               case 2:
                  if (curChar == 92 && kind > 124)
                     kind = 124;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 124)
                     kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L)
            return 14;
         if ((active1 & 0x10800L) != 0L)
         {
            jjmatchedKind = 87;
            return 74;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 4;
         if ((active0 & 0xff80000000000000L) != 0L || (active1 & 0x7ef7ffL) != 0L)
         {
            jjmatchedKind = 87;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x2c80000000000000L) != 0L || (active1 & 0x180000L) != 0L)
            return 4;
         if ((active0 & 0xd300000000000000L) != 0L || (active1 & 0x67ffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 1;
            }
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x300000000000000L) != 0L || (active1 & 0x8016L) != 0L)
            return 4;
         if ((active0 & 0xd000000000000000L) != 0L || (active1 & 0x6f7fe9L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x4b3ee9L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
            return 4;
         }
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x244100L) != 0L)
            return 4;
         return -1;
      case 4:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x4a2c48L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
            return 4;
         }
         if ((active1 & 0x112a1L) != 0L)
            return 4;
         return -1;
      case 5:
         if ((active1 & 0x402440L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
            return 4;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0xa0808L) != 0L)
            return 4;
         return -1;
      case 6:
         if ((active1 & 0x2040L) != 0L)
            return 4;
         if ((active1 & 0x400400L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 36:
         return jjStartNfaWithStates_0(0, 52, 4);
      case 37:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 38:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 42:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x8040001000000L, 0x0L);
      case 43:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 15);
      case 45:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 16, 14);
      case 47:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x180000800000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 17);
      case 59:
         return jjStopAtPos(0, 14);
      case 60:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x22005002000000L, 0x0L);
      case 61:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 62:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x4002004000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 54);
      case 91:
         return jjStopAtPos(0, 12);
      case 93:
         return jjStopAtPos(0, 13);
      case 94:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 96:
         return jjStopAtPos(0, 131);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x180000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x420L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8010L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x40008L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x404042L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2c00000000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10800L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200001L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 123:
         return jjStopAtPos(0, 10);
      case 124:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 11);
      case 126:
         return jjStopAtPos(0, 28);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 45:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 47:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 60:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 62:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x10100L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8810L);
      case 102:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 4);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x203040L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000000L, active1, 0x20020L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 4);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x402L);
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 4);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4284L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 4);
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40008L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 44);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 4);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x41200L);
      case 102:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 4);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x10081L);
      case 108:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 4);
         break;
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400440L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x24000L);
      case 114:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 4);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x80100L);
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200800L);
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x240L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x20000L);
      case 99:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L);
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80008L);
      case 102:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 4);
         break;
      case 104:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 4);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1001L);
      case 109:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 4);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10020L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x22000L);
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 4);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 4);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 107:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 4);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80800L);
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 4);
         break;
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 4);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L);
      case 108:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 116:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 4);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x400L);
      case 121:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 4);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 4);
         break;
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, 0L);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 74;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  else if ((0x401000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(15);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAddTwoStates(16, 17);
                  }
                  break;
               case 74:
                  if ((0x3ff401000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if (curChar == 34)
                  {
                     if (kind > 101)
                        kind = 101;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 100)
                        kind = 100;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 15);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 36)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(1);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddStates(19, 23);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 89)
                        kind = 89;
                     jjCheckNAddStates(24, 29);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 101)
                        kind = 101;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 100)
                        kind = 100;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                     kind = 18;
                  break;
               case 3:
                  if (curChar != 36)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff401000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 39 && kind > 100)
                     kind = 100;
                  break;
               case 6:
                  if (curChar == 34 && kind > 101)
                     kind = 101;
                  break;
               case 7:
                  if (curChar == 39 && kind > 102)
                     kind = 102;
                  break;
               case 8:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 34 && kind > 103)
                     kind = 103;
                  break;
               case 11:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAddStates(16, 18);
                  break;
               case 15:
                  if ((0x3ff401000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(19, 23);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 30:
                  if (curChar != 48)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(24, 29);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjAddStates(33, 34);
                  break;
               case 34:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 38:
                  if (curChar == 48)
                     jjCheckNAdd(24);
                  break;
               case 41:
                  if (curChar == 39 && kind > 96)
                     kind = 96;
                  break;
               case 43:
                  if (curChar == 34 && kind > 97)
                     kind = 97;
                  break;
               case 45:
                  if (curChar == 39 && kind > 98)
                     kind = 98;
                  break;
               case 46:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if (curChar == 34 && kind > 99)
                     kind = 99;
                  break;
               case 50:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 15);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar != 46)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(59);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(67, 24);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 46)
                     jjCheckNAddStates(38, 40);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(15);
                  break;
               case 74:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(4);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(4);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(41, 44);
                  else if ((0x20000000200000L & l) != 0L)
                     jjCheckNAddStates(45, 52);
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(4);
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 24:
                  if ((0x40000000400L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 27:
                  if ((0x100000001000L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 29:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 31:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if ((0x100000001000L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 35:
                  if ((0x100000001000L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 39:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAddStates(45, 52);
                  break;
               case 40:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(41, 44);
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 65:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 74 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            return 2;
         }
         return -1;
      case 1:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 104);
      case 92:
         return jjMoveStringLiteralDfa1_3(0x1000000000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_3(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private final int jjMoveStringLiteralDfa2_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(0, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 124)
                        kind = 124;
                  }
                  break;
               case 3:
                  if (curChar == 39 && kind > 124)
                     kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 124)
                     kind = 124;
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               case 2:
                  if (curChar == 92 && kind > 124)
                     kind = 124;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 124)
                     kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_14()
{
   return 1;
}
private final int jjMoveStringLiteralDfa0_13()
{
   return 1;
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     jjCheckNAddStates(2, 4);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 2:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  jjAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   2, 3, 1, 3, 4, 20, 21, 24, 54, 55, 60, 61, 64, 65, 68, 69, 
   14, 16, 20, 26, 27, 28, 29, 24, 31, 34, 35, 36, 38, 24, 28, 29, 
   24, 32, 33, 37, 29, 24, 70, 71, 24, 5, 6, 9, 12, 40, 41, 42, 
   43, 44, 47, 48, 51, 18, 19, 22, 23, 58, 59, 62, 63, 66, 67, 72, 
   73, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\72", null, "\53", "\55", "\52", "\57", 
"\57\57", "\52\52", "\74\74", "\76\76", "\45", "\176", "\136", "\174", "\46", "\75", 
"\76", "\74", "\75\75", "\74\75", "\76\75", "\74\76", "\41\75", "\53\75", "\55\75", 
"\52\75", "\57\75", "\57\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", 
"\76\76\75", "\52\52\75", "\44", "\74\55", "\100", "\157\162", "\141\156\144", 
"\156\157\164", "\151\163", "\151\156", "\154\141\155\142\144\141", "\151\146", 
"\145\154\163\145", "\145\154\151\146", "\167\150\151\154\145", "\146\157\162", "\164\162\171", 
"\145\170\143\145\160\164", "\144\145\146", "\143\154\141\163\163", "\146\151\156\141\154\154\171", 
"\160\162\151\156\164", "\160\141\163\163", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", "\171\151\145\154\144", 
"\154\151\142\162\141\162\171", "\146\162\157\155", "\144\145\154", "\162\141\151\163\145", 
"\147\154\157\142\141\154", "\145\170\145\143", "\141\163\163\145\162\164", "\141\163", 
"\167\151\164\150", "\146\165\156\143\164\151\157\156", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\140", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "INDENTING", 
   "INDENTATION_UNCHANGED", 
   "IN_STRING11", 
   "IN_STRING21", 
   "IN_STRING13", 
   "IN_STRING23", 
   "IN_USTRING11", 
   "IN_USTRING21", 
   "IN_USTRING13", 
   "IN_USTRING23", 
   "IN_STRING1NLC", 
   "IN_STRING2NLC", 
   "IN_USTRING1NLC", 
   "IN_USTRING2NLC", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 9, 10, 
   3, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 12, 12, 13, 13, 14, 14, 3, 4, 7, 8, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0xff003effffffL, 0x8L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3eL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0xffff00ff00000000L, 0x7L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[74];
private final int[] jjstateSet = new int[148];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public RParserTokenManager(CharStream stream){
   input_stream = stream;
}
public RParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 74; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 15 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
       case 11:
         jjmatchedKind = 120;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         break;
       case 12:
         jjmatchedKind = 121;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         break;
       case 13:
         jjmatchedKind = 122;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         break;
       case 14:
         jjmatchedKind = 123;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 112 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                               image.setLength(image.length()-3);
         break;
      case 113 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  image.setLength(image.length()-2);
         break;
      case 114 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                               image.setLength(image.length()-3);
         break;
      case 115 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  image.setLength(image.length()-2);
         break;
      case 116 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                               image.setLength(image.length()-3);
         break;
      case 117 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  image.setLength(image.length()-2);
         break;
      case 118 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                               image.setLength(image.length()-3);
         break;
      case 119 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                  image.setLength(image.length()-2);
         break;
      case 126 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                int l = image.length();
                image.setLength(l-1);
                image.setCharAt(l-2, '\n');
         break;
      case 128 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                    image.setCharAt(image.length()-1, '\n');
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 104 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = image.toString();
         break;
      case 105 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = image.toString();
         break;
      case 106 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = image.toString();
         break;
      case 107 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = image.toString();
         break;
      case 108 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = image.toString();
         break;
      case 109 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = image.toString();
         break;
      case 110 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = image.toString();
         break;
      case 111 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = image.toString();
         break;
      default : 
         break;
   }
}
}
