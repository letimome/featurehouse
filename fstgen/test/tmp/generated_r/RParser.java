/* Generated By:JavaCC: Do not edit this line. RParser.java */
package tmp.generated_r;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class RParser extends AbstractFSTParser implements RParserConstants {
        public RParser() {}

  final public FSTInfo file_input(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case NOT:
      case NOT_BOOL:
      case LAMBDA:
      case IF:
      case WHILE:
      case FOR:
      case LIBRARY:
      case NAME:
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
      case 131:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n = stmt(inTerminal);
                             replaceName(n);
    }
    jj_consume_token(0);
                                                       {if (true) return productionEndNonTerminal("file_input","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo stmt(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_1(2147483647)) {
      n = funcdef(inTerminal);
                                                                         replaceName("funcdef", n);
                                                                                                      replaceName(n);
                                                                                                                        {if (true) return productionEndNonTerminal("FunctionDefinition","{funcdef}","{funcdef}");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case NOT:
      case NOT_BOOL:
      case LAMBDA:
      case LIBRARY:
      case NAME:
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
      case 131:
        n = simple_stmt(inTerminal);
                                   replaceName("simple_stmt", n);
                                                                    replaceName(n);
                                                                                      {if (true) return productionEndNonTerminal("stmt2","{simple_stmt}","{simple_stmt}");}
        break;
      case IF:
        n = if_stmt(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("stmt3","{AUTO}","{AUTO}","Replacement","SemanticConflict",first,token);}
        break;
      case WHILE:
        n = while_stmt(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("stmt4","{AUTO}","{AUTO}","Replacement","SemanticConflict",first,token);}
        break;
      case FOR:
        n = for_stmt(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("stmt5","{AUTO}","{AUTO}","Replacement","SemanticConflict",first,token);}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo funcdef(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(NAME);
                  replaceName(new FSTInfo("<NAME>",t.image));
    n = assignType(true);
                                                                                   replaceName(n);
    jj_consume_token(FUNCTION);
    n = parameters(true);
                                                                                                                                   replaceName("parameters", n);
                                                                                                                                                                   replaceName(n);
    n = function_body(true);
                                                                                                                                                                                                           replaceName(n);
                                                                                                                                                                                                                             {if (true) return productionEndTerminal("funcdef","-","{<NAME>} ({parameters}) ","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo assignType(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
              {if (true) return productionEndTerminal("assignType1","-","-","Replacement","Default",first,token);}
      break;
    case LESSMINUS:
      jj_consume_token(LESSMINUS);
               {if (true) return productionEndTerminal("assignType2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo function(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FUNCTION);
                    {if (true) return productionEndTerminal("function","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo function_body(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case NOT:
      case NOT_BOOL:
      case LAMBDA:
      case IF:
      case WHILE:
      case FOR:
      case LIBRARY:
      case NAME:
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
      case 131:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      n = stmt(true);
                           replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                   {if (true) return productionEndTerminal("function_body","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo simple_stmt(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = small_stmt(inTerminal);
                                  replaceName("small_stmt", n);
                                                                  replaceName(n);
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(SEMICOLON);
      n = small_stmt(inTerminal);
                                                                                                                               replaceName("small_stmt", n);
                                                                                                                                                               replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                                                                                                                                                                                          {if (true) return productionEndNonTerminal("simple_stmt","{small_stmt}","{small_stmt}");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo small_stmt(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIBRARY:
      n = import_stmt(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("small_stmt1","{TOSTRING}","{TOSTRING}","Replacement","SemanticConflict",first,token);}
      break;
    default:
      jj_la1[5] = jj_gen;
      if (jj_2_3(2147483647)) {
        n = assignment_stmt(true);
                                                                replaceName("assignment_stmt", n);
                                                                                                     replaceName(n);
                                                                                                                       {if (true) return productionEndTerminal("small_stmt2","{assignment_stmt}","{assignment_stmt}","Replacement","SemanticConflict",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case NOT:
        case NOT_BOOL:
        case LAMBDA:
        case NAME:
        case DECNUMBER:
        case HEXNUMBER:
        case OCTNUMBER:
        case FLOAT:
        case COMPLEX:
        case SINGLE_STRING:
        case SINGLE_STRING2:
        case TRIPLE_STRING:
        case TRIPLE_STRING2:
        case SINGLE_USTRING:
        case SINGLE_USTRING2:
        case TRIPLE_USTRING:
        case TRIPLE_USTRING2:
        case 131:
          n = expr_stmt(true);
                           replaceName("expr_stmt", n);
                                                          replaceName(n);
                                                                            {if (true) return productionEndTerminal("small_stmt3","{expr_stmt}","{expr_stmt}","Replacement","SemanticConflict",first,token);}
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo assignment_stmt(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(NAME);
                  replaceName(new FSTInfo("<NAME>",t.image));
    n = assignType(true);
                                                                                   replaceName(n);
    n = SmartTestList(true);
                                                                                                                           replaceName(n);
                                                                                                                                             {if (true) return productionEndTerminal("assignment_stmt","-","{<NAME>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo expr_stmt(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = SmartTestList(true);
                               replaceName("SmartTestList", n);
                                                                  replaceName(n);
    n = expr_stmtEnd(true);
                                                                                                         replaceName(n);
                                                                                                                           {if (true) return productionEndTerminal("expr_stmt","-","{SmartTestList}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo expr_stmtEnd(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSEQ:
      jj_consume_token(PLUSEQ);
      n = SmartTestList(true);
                                        replaceName(n);
                                                          {if (true) return productionEndTerminal("expr_stmtEnd1","-","-","Replacement","Default",first,token);}
      break;
    case MINUSEQ:
      jj_consume_token(MINUSEQ);
      n = SmartTestList(true);
                                         replaceName(n);
                                                           {if (true) return productionEndTerminal("expr_stmtEnd2","-","-","Replacement","Default",first,token);}
      break;
    case MULTIPLYEQ:
      jj_consume_token(MULTIPLYEQ);
      n = SmartTestList(true);
                                            replaceName(n);
                                                              {if (true) return productionEndTerminal("expr_stmtEnd3","-","-","Replacement","Default",first,token);}
      break;
    case DIVIDEEQ:
      jj_consume_token(DIVIDEEQ);
      n = SmartTestList(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("expr_stmtEnd4","-","-","Replacement","Default",first,token);}
      break;
    case FLOORDIVIDEEQ:
      jj_consume_token(FLOORDIVIDEEQ);
      n = SmartTestList(true);
                                               replaceName(n);
                                                                 {if (true) return productionEndTerminal("expr_stmtEnd5","-","-","Replacement","Default",first,token);}
      break;
    case MODULOEQ:
      jj_consume_token(MODULOEQ);
      n = SmartTestList(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("expr_stmtEnd6","-","-","Replacement","Default",first,token);}
      break;
    case ANDEQ:
      jj_consume_token(ANDEQ);
      n = SmartTestList(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("expr_stmtEnd7","-","-","Replacement","Default",first,token);}
      break;
    case OREQ:
      jj_consume_token(OREQ);
      n = SmartTestList(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("expr_stmtEnd8","-","-","Replacement","Default",first,token);}
      break;
    case XOREQ:
      jj_consume_token(XOREQ);
      n = SmartTestList(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("expr_stmtEnd9","-","-","Replacement","Default",first,token);}
      break;
    case LSHIFTEQ:
      jj_consume_token(LSHIFTEQ);
      n = SmartTestList(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("expr_stmtEnd10","-","-","Replacement","Default",first,token);}
      break;
    case RSHIFTEQ:
      jj_consume_token(RSHIFTEQ);
      n = SmartTestList(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("expr_stmtEnd11","-","-","Replacement","Default",first,token);}
      break;
    case POWEREQ:
      jj_consume_token(POWEREQ);
      n = SmartTestList(true);
                                         replaceName(n);
                                                           {if (true) return productionEndTerminal("expr_stmtEnd12","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(EQUAL);
        n = SmartTestList(true);
                                    replaceName(n);
      }
                                                        {if (true) return productionEndTerminal("expr_stmtEnd13","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo flow_stmt(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      jj_consume_token(BREAK);
                 {if (true) return productionEndTerminal("flow_stmt1","-","-","Replacement","Default",first,token);}
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
                    {if (true) return productionEndTerminal("flow_stmt2","-","-","Replacement","Default",first,token);}
      break;
    case RETURN:
      n = return_stmt(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("flow_stmt3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo return_stmt(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = SmartTestList(true);
                                         replaceName(n);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
                                                            {if (true) return productionEndTerminal("return_stmt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo testcommatest(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = test(true);
                      replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      n = test(true);
                                                          replaceName(n);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                                                                             {if (true) return productionEndTerminal("testcommatest","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo import_stmt(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LIBRARY);
    jj_consume_token(LPAREN);
    n = Name(true);
                                    replaceName(n);
    jj_consume_token(RPAREN);
                                                          {if (true) return productionEndTerminal("import_stmt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo dotted_as_name(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = dotted_name(true);
                             replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      n = Name(true);
                                                                  replaceName(n);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
                                                                                     {if (true) return productionEndTerminal("dotted_as_name","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo dotted_name(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = AnyName(true);
                         replaceName(n);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(DOT);
      n = AnyName(true);
                                                                replaceName(n);
    }
                                                                                    {if (true) return productionEndTerminal("dotted_name","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo if_stmt(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    n = expr_stmt(true);
                                    replaceName(n);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case NOT:
      case NOT_BOOL:
      case LAMBDA:
      case IF:
      case WHILE:
      case FOR:
      case LIBRARY:
      case NAME:
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
      case 131:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      n = stmt(true);
                                                                            replaceName(n);
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      n = else_clause(true);
                                                                                                                         replaceName(n);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                                                                                                                                            {if (true) return productionEndTerminal("if_stmt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo else_clause(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ELSE);
    jj_consume_token(LBRACE);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case NOT:
      case NOT_BOOL:
      case LAMBDA:
      case IF:
      case WHILE:
      case FOR:
      case LIBRARY:
      case NAME:
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
      case 131:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      n = stmt(true);
                                  replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                          {if (true) return productionEndTerminal("else_clause","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo if_stmt_End(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case LIBRARY:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = small_stmt(true);
                            replaceName(n);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELIF:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_8;
        }
        n = elif_stmt(true);
                                                                 replaceName(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        n = else_stmt(true);
                                                                                                        replaceName(n);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
                                                                                                                           {if (true) return productionEndTerminal("if_stmt_End1","-","-","Replacement","Default",first,token);}
      break;
    case NEWLINE:
      n = suite(true);
                       replaceName(n);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELIF:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_9;
        }
        n = elif_stmt(true);
                                                            replaceName(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        n = else_stmt(true);
                                                                                                   replaceName(n);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
                                                                                                                      {if (true) return productionEndTerminal("if_stmt_End2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo elif_stmt(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ELIF);
    n = test(true);
                             replaceName(n);
    jj_consume_token(COLON);
    n = elif_stmt_End(true);
                                                                         replaceName(n);
                                                                                           {if (true) return productionEndTerminal("elif_stmt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo elif_stmt_End(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case LIBRARY:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = small_stmt(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("elif_stmt_End1","-","-","Replacement","Default",first,token);}
      break;
    case NEWLINE:
      n = suite(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("elif_stmt_End2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo else_stmt(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ELSE);
    jj_consume_token(COLON);
    n = else_stmt_End(true);
                                          replaceName(n);
                                                            {if (true) return productionEndTerminal("else_stmt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo else_stmt_End(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case LIBRARY:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = small_stmt(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("else_stmt_End1","-","-","Replacement","Default",first,token);}
      break;
    case NEWLINE:
      n = suite(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("else_stmt_End2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo while_stmt(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(WHILE);
    n = test(true);
                              replaceName(n);
    jj_consume_token(COLON);
    n = while_stmt_End(true);
                                                                           replaceName(n);
                                                                                             {if (true) return productionEndTerminal("while_stmt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo while_stmt_End(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case LIBRARY:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = small_stmt(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("while_stmt_End1","-","-","Replacement","Default",first,token);}
      break;
    case NEWLINE:
      n = suite(true);
                       replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        n = else_stmt(true);
                                                            replaceName(n);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
                                                                               {if (true) return productionEndTerminal("while_stmt_End2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo for_stmt(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FOR);
    n = exprlist(true);
                                replaceName(n);
    jj_consume_token(IN);
    n = SmartTestList(true);
                                                                             replaceName(n);
    jj_consume_token(COLON);
    n = for_stmt_End(true);
                                                                                                                        replaceName(n);
                                                                                                                                          {if (true) return productionEndTerminal("for_stmt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo for_stmt_End(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case LIBRARY:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = small_stmt(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("for_stmt_End1","-","-","Replacement","Default",first,token);}
      break;
    case NEWLINE:
      n = suite(true);
                       replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        n = else_stmt(true);
                                                            replaceName(n);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
                                                                               {if (true) return productionEndTerminal("for_stmt_End2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo test(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAMBDA:
      n = lambdef(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("test1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = and_test(true);
                          replaceName(n);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR_BOOL:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_10;
        }
        jj_consume_token(OR_BOOL);
        n = and_test(true);
                                                                   replaceName(n);
      }
                                                                                       {if (true) return productionEndTerminal("test2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo and_test(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = not_test(true);
                          replaceName(n);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_BOOL:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      jj_consume_token(AND_BOOL);
      n = not_test(true);
                                                                    replaceName(n);
    }
                                                                                        {if (true) return productionEndTerminal("and_test","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo not_test(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_BOOL:
      jj_consume_token(NOT_BOOL);
      n = not_test(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("not_test1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = comparison(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("not_test2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo comparison(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = expr(true);
                      replaceName(n);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
      case LESS:
      case EQEQUAL:
      case EQLESS:
      case EQGREATER:
      case LESSGREATER:
      case NOTEQUAL:
      case NOT_BOOL:
      case IS:
      case IN:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_12;
      }
      n = compEnd(true);
                                                         replaceName(n);
    }
                                                                             {if (true) return productionEndTerminal("comparison","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo compEnd(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = comp_op(true);
                         replaceName(n);
    n = expr(true);
                                                        replaceName(n);
                                                                          {if (true) return productionEndTerminal("compEnd","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo comp_op(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      jj_consume_token(LESS);
                {if (true) return productionEndTerminal("comp_op1","-","-","Replacement","Default",first,token);}
      break;
    case GREATER:
      jj_consume_token(GREATER);
                   {if (true) return productionEndTerminal("comp_op2","-","-","Replacement","Default",first,token);}
      break;
    case EQEQUAL:
      jj_consume_token(EQEQUAL);
                   {if (true) return productionEndTerminal("comp_op3","-","-","Replacement","Default",first,token);}
      break;
    case EQGREATER:
      jj_consume_token(EQGREATER);
                     {if (true) return productionEndTerminal("comp_op4","-","-","Replacement","Default",first,token);}
      break;
    case EQLESS:
      jj_consume_token(EQLESS);
                  {if (true) return productionEndTerminal("comp_op5","-","-","Replacement","Default",first,token);}
      break;
    case LESSGREATER:
      jj_consume_token(LESSGREATER);
                       {if (true) return productionEndTerminal("comp_op6","-","-","Replacement","Default",first,token);}
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
                    {if (true) return productionEndTerminal("comp_op7","-","-","Replacement","Default",first,token);}
      break;
    case IN:
      jj_consume_token(IN);
              {if (true) return productionEndTerminal("comp_op8","-","-","Replacement","Default",first,token);}
      break;
    case NOT_BOOL:
      jj_consume_token(NOT_BOOL);
      jj_consume_token(IN);
                    {if (true) return productionEndTerminal("comp_op9","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[33] = jj_gen;
      if (jj_2_4(2)) {
        jj_consume_token(IS);
        jj_consume_token(NOT_BOOL);
                                 {if (true) return productionEndTerminal("comp_op10","-","-","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IS:
          jj_consume_token(IS);
              {if (true) return productionEndTerminal("comp_op11","-","-","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo expr(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = xor_expr(true);
                          replaceName(n);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_13;
      }
      jj_consume_token(OR);
      n = xor_expr(true);
                                                                  replaceName(n);
    }
                                                                                      {if (true) return productionEndTerminal("expr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo xor_expr(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = and_expr(true);
                          replaceName(n);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_14;
      }
      jj_consume_token(XOR);
      n = and_expr(true);
                                                                  replaceName(n);
    }
                                                                                      {if (true) return productionEndTerminal("xor_expr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo and_expr(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = shift_expr(true);
                            replaceName(n);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_15;
      }
      jj_consume_token(AND);
      n = shift_expr(true);
                                                                      replaceName(n);
    }
                                                                                          {if (true) return productionEndTerminal("and_expr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo shift_expr(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = arith_expr(true);
                            replaceName(n);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSHIFT:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_16;
      }
      n = shift_exprEnd(true);
                                                                     replaceName(n);
    }
                                                                                         {if (true) return productionEndTerminal("shift_expr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo shift_exprEnd(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
      jj_consume_token(LSHIFT);
      n = arith_expr(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("shift_exprEnd1","-","-","Replacement","Default",first,token);}
      break;
    case RSHIFT:
      jj_consume_token(RSHIFT);
      n = arith_expr(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("shift_exprEnd2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo arith_expr(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = term(true);
                      replaceName(n);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_17;
      }
      n = arith_exprEnd(true);
                                                               replaceName(n);
    }
                                                                                   {if (true) return productionEndTerminal("arith_expr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo arith_exprEnd(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      n = term(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("arith_exprEnd1","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      n = term(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("arith_exprEnd2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo term(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = factor(true);
                        replaceName(n);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case FLOORDIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_18;
      }
      n = termEnd(true);
                                                           replaceName(n);
    }
                                                                               {if (true) return productionEndTerminal("term","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo termEnd(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      n = factor(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("termEnd1","-","-","Replacement","Default",first,token);}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      n = factor(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("termEnd2","-","-","Replacement","Default",first,token);}
      break;
    case FLOORDIVIDE:
      jj_consume_token(FLOORDIVIDE);
      n = factor(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("termEnd3","-","-","Replacement","Default",first,token);}
      break;
    case MODULO:
      jj_consume_token(MODULO);
      n = factor(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("termEnd4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo factor(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      n = factor(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("factor1","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      n = factor(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("factor2","-","-","Replacement","Default",first,token);}
      break;
    case NOT:
      jj_consume_token(NOT);
      n = factor(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("factor3","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = powerfactor(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("factor4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo powerfactor(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = atomtrailer(true);
                             replaceName(n);
    label_19:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(POWER);
      n = factor(true);
                                                                                 replaceName(n);
    }
                                                                                                     {if (true) return productionEndTerminal("powerfactor","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo atomtrailer(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = atom(true);
                      replaceName(n);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_20;
      }
      n = atomtrailerEnd(true);
                                                                replaceName(n);
    }
                                                                                    {if (true) return productionEndTerminal("atomtrailer","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo atomtrailerEnd(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_6(2)) {
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
                               {if (true) return productionEndTerminal("atomtrailerEnd1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        n = arglist(true);
                             replaceName(n);
        jj_consume_token(RPAREN);
                                                   {if (true) return productionEndTerminal("atomtrailerEnd2","-","-","Replacement","Default",first,token);}
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        n = subscriptlist(true);
                                   replaceName(n);
        jj_consume_token(RBRACKET);
                                                         {if (true) return productionEndTerminal("atomtrailerEnd3","-","-","Replacement","Default",first,token);}
        break;
      case DOT:
        jj_consume_token(DOT);
        n = AnyName(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("atomtrailerEnd4","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo atom(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_7(2)) {
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
                               {if (true) return productionEndTerminal("atom1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_8(2)) {
      n = Name(true);
                                   replaceName(n);
      jj_consume_token(EQUAL);
      n = test(true);
                                                                      replaceName(n);
                                                                                        {if (true) return productionEndTerminal("atom2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case NOT:
        case NOT_BOOL:
        case LAMBDA:
        case NAME:
        case DECNUMBER:
        case HEXNUMBER:
        case OCTNUMBER:
        case FLOAT:
        case COMPLEX:
        case SINGLE_STRING:
        case SINGLE_STRING2:
        case TRIPLE_STRING:
        case TRIPLE_STRING2:
        case SINGLE_USTRING:
        case SINGLE_USTRING2:
        case TRIPLE_USTRING:
        case TRIPLE_USTRING2:
        case 131:
          n = SmartTestList(true);
                                    replaceName(n);
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
                                                           {if (true) return productionEndTerminal("atom3","-","-","Replacement","Default",first,token);}
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case NOT:
        case NOT_BOOL:
        case LAMBDA:
        case NAME:
        case DECNUMBER:
        case HEXNUMBER:
        case OCTNUMBER:
        case FLOAT:
        case COMPLEX:
        case SINGLE_STRING:
        case SINGLE_STRING2:
        case TRIPLE_STRING:
        case TRIPLE_STRING2:
        case SINGLE_USTRING:
        case SINGLE_USTRING2:
        case TRIPLE_USTRING:
        case TRIPLE_USTRING2:
        case 131:
          n = listmaker(true);
                                       replaceName(n);
          break;
        default:
          jj_la1[48] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
                                                              {if (true) return productionEndTerminal("atom4","-","-","Replacement","Default",first,token);}
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case NOT:
        case NOT_BOOL:
        case LAMBDA:
        case NAME:
        case DECNUMBER:
        case HEXNUMBER:
        case OCTNUMBER:
        case FLOAT:
        case COMPLEX:
        case SINGLE_STRING:
        case SINGLE_STRING2:
        case TRIPLE_STRING:
        case TRIPLE_STRING2:
        case SINGLE_USTRING:
        case SINGLE_USTRING2:
        case TRIPLE_USTRING:
        case TRIPLE_USTRING2:
        case 131:
          n = dictmaker(true);
                                replaceName(n);
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        jj_consume_token(RBRACE);
                                                       {if (true) return productionEndTerminal("atom5","-","-","Replacement","Default",first,token);}
        break;
      case 131:
        jj_consume_token(131);
        n = SmartTestList(true);
                                   replaceName(n);
        jj_consume_token(131);
                                                         {if (true) return productionEndTerminal("atom6","-","-","Replacement","Default",first,token);}
        break;
      case NAME:
        n = Name(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("atom7","-","-","Replacement","Default",first,token);}
        break;
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
        n = Number(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("atom8","-","-","Replacement","Default",first,token);}
        break;
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
        n = StringNode(true);
                            replaceName(n);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SINGLE_STRING:
          case SINGLE_STRING2:
          case TRIPLE_STRING:
          case TRIPLE_STRING2:
          case SINGLE_USTRING:
          case SINGLE_USTRING2:
          case TRIPLE_USTRING:
          case TRIPLE_USTRING2:
            ;
            break;
          default:
            jj_la1[50] = jj_gen;
            break label_21;
          }
          n = StringNode(true);
                                                                  replaceName(n);
        }
                                                                                      {if (true) return productionEndTerminal("atom9","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo lambdef(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LAMBDA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MULTIPLY:
    case POWER:
    case NAME:
      n = varargslist(true);
                                       replaceName(n);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    n = test(true);
                                                                           replaceName(n);
                                                                                             {if (true) return productionEndTerminal("lambdef","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo subscriptlist(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case DOT:
    case COLON:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = subscript(true);
                           replaceName(n);
      label_22:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_22;
        }
        jj_consume_token(COMMA);
        n = subscript(true);
                                                                                 replaceName(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
                                                                                                            {if (true) return productionEndTerminal("subscriptlist1","-","-","Replacement","Default",first,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
      n = subscript(true);
                               replaceName(n);
      label_23:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_23;
        }
        jj_consume_token(COMMA);
        n = subscript(true);
                                                                                     replaceName(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
                                                                                                                {if (true) return productionEndTerminal("subscriptlist2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo subscript(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(DOT);
      jj_consume_token(DOT);
                           {if (true) return productionEndTerminal("subscript1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = test(true);
                      replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        n = slice(true);
                                                       replaceName(n);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
                                                                          {if (true) return productionEndTerminal("subscript2","-","-","Replacement","Default",first,token);}
      break;
    case COLON:
      n = slice(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("subscript3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo slice(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ct(true);
                    replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      n = ct(true);
                                                  replaceName(n);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
                                                                     {if (true) return productionEndTerminal("slice","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ct(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case NOT_BOOL:
    case LAMBDA:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = test(true);
                           replaceName(n);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
                                              {if (true) return productionEndTerminal("ct","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exprlist(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = expr(true);
                      replaceName(n);
    label_24:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_24;
      }
      jj_consume_token(COMMA);
      n = expr(true);
                                                                       replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
                                                                                                  {if (true) return productionEndTerminal("exprlist","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SmartTestList(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = test(true);
                      replaceName(n);
    label_25:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_25;
      }
      jj_consume_token(COMMA);
      n = test(true);
                                                                       replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
                                                                                                  {if (true) return productionEndTerminal("SmartTestList","-","{TOSTRING}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo testlist(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = test(true);
                      replaceName(n);
    label_26:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_26;
      }
      jj_consume_token(COMMA);
      n = test(true);
                                                                       replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
                                                                                                  {if (true) return productionEndTerminal("testlist","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo dictmaker(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = test(true);
                      replaceName(n);
    jj_consume_token(COLON);
    n = test(true);
                                                         replaceName(n);
    label_27:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_27;
      }
      n = dictInt(true);
                                                                                                         replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
                                                                                                                                    {if (true) return productionEndTerminal("dictmaker","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo dictInt(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COMMA);
    n = test(true);
                          replaceName(n);
    jj_consume_token(COLON);
    n = test(true);
                                                             replaceName(n);
                                                                               {if (true) return productionEndTerminal("dictInt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo listmaker(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = test(true);
                      replaceName(n);
    n = listmakerEnd(true);
                                                             replaceName(n);
                                                                               {if (true) return productionEndTerminal("listmaker","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo listmakerEnd(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      label_28:
      while (true) {
        n = list_for(true);
                           replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_28;
        }
      }
                                               {if (true) return productionEndTerminal("listmakerEnd1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[66] = jj_gen;
      label_29:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_29;
        }
        jj_consume_token(COMMA);
        n = test(true);
                                        replaceName(n);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
                                                                   {if (true) return productionEndTerminal("listmakerEnd2","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo list_for(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FOR);
    n = exprlist(true);
                                replaceName(n);
    jj_consume_token(IN);
    n = SmartTestList(true);
                                                                             replaceName(n);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_30;
      }
      n = list_if(true);
                                                                                                                replaceName(n);
    }
                                                                                                                                    {if (true) return productionEndTerminal("list_for","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo list_if(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IF);
    n = test(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("list_if","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo decorators(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_31:
    while (true) {
      n = decorator(true);
                            replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_31;
      }
    }
                                                {if (true) return productionEndTerminal("decorators","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo decorator(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(AT);
    n = dotted_name(true);
                                 replaceName(n);
    n = decorator_End(true);
                                                                         replaceName(n);
                                                                                           {if (true) return productionEndTerminal("decorator","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo decorator_End(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    n = decorator_End_Par(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("decorator_End","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo decorator_End_Par(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RPAREN:
      jj_consume_token(RPAREN);
      jj_consume_token(NEWLINE);
                                     {if (true) return productionEndTerminal("decorator_End_Par1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case POWER:
    case NOT:
    case OR_BOOL:
    case AND_BOOL:
    case NOT_BOOL:
    case IS:
    case IN:
    case LAMBDA:
    case IF:
    case ELSE:
    case ELIF:
    case WHILE:
    case FOR:
    case TRY:
    case EXCEPT:
    case DEF:
    case CLASS:
    case FINALLY:
    case PRINT:
    case PASS:
    case BREAK:
    case CONTINUE:
    case RETURN:
    case YIELD:
    case LIBRARY:
    case FROM:
    case DEL:
    case RAISE:
    case GLOBAL:
    case EXEC:
    case ASSERT:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = arglist(true);
                         replaceName(n);
      jj_consume_token(RPAREN);
      jj_consume_token(NEWLINE);
                                                          {if (true) return productionEndTerminal("decorator_End_Par2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Field(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(NAME);
                  replaceName(new FSTInfo("<NAME>",t.image));
    jj_consume_token(EQUAL);
    n = SmartTestList(true);
                                                                                          replaceName(n);
                                                                                                            {if (true) return productionEndTerminal("Field","-","{<NAME>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo suite(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(NEWLINE);
    label_32:
    while (true) {
      n = stmt(true);
                                 replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case NOT:
      case NOT_BOOL:
      case LAMBDA:
      case IF:
      case WHILE:
      case FOR:
      case LIBRARY:
      case NAME:
      case DECNUMBER:
      case HEXNUMBER:
      case OCTNUMBER:
      case FLOAT:
      case COMPLEX:
      case SINGLE_STRING:
      case SINGLE_STRING2:
      case TRIPLE_STRING:
      case TRIPLE_STRING2:
      case SINGLE_USTRING:
      case SINGLE_USTRING2:
      case TRIPLE_USTRING:
      case TRIPLE_USTRING2:
      case 131:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_32;
      }
    }
                                                     {if (true) return productionEndTerminal("suite","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo arglist(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case NOT:
    case OR_BOOL:
    case AND_BOOL:
    case NOT_BOOL:
    case IS:
    case IN:
    case LAMBDA:
    case IF:
    case ELSE:
    case ELIF:
    case WHILE:
    case FOR:
    case TRY:
    case EXCEPT:
    case DEF:
    case CLASS:
    case FINALLY:
    case PRINT:
    case PASS:
    case BREAK:
    case CONTINUE:
    case RETURN:
    case YIELD:
    case LIBRARY:
    case FROM:
    case DEL:
    case RAISE:
    case GLOBAL:
    case EXEC:
    case ASSERT:
    case AS:
    case NAME:
    case DECNUMBER:
    case HEXNUMBER:
    case OCTNUMBER:
    case FLOAT:
    case COMPLEX:
    case SINGLE_STRING:
    case SINGLE_STRING2:
    case TRIPLE_STRING:
    case TRIPLE_STRING2:
    case SINGLE_USTRING:
    case SINGLE_USTRING2:
    case TRIPLE_USTRING:
    case TRIPLE_USTRING2:
    case 131:
      n = normalargs(true);
                            replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n = arglist1End(true);
                                                                   replaceName(n);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
                                                                                      {if (true) return productionEndTerminal("arglist1","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[72] = jj_gen;
      if (jj_2_16(2)) {
        n = arglist1EndEnd(true);
                                              replaceName(n);
      } else {
        ;
      }
                                                                 {if (true) return productionEndTerminal("arglist2","-","-","Replacement","Default",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo arglist1End(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COMMA);
    if (jj_2_17(2)) {
      n = arglist1EndEnd(true);
                                                  replaceName(n);
    } else {
      ;
    }
                                                                     {if (true) return productionEndTerminal("arglist1End","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo arglist1EndEnd(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_18(2)) {
      n = ExtraArgValueList(true);
                                                replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        n = ExtraKeywordValueList(true);
                                                                                                     replaceName(n);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
                                                                                                                        {if (true) return productionEndTerminal("arglist1EndEnd1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case POWER:
        n = ExtraKeywordValueList(true);
                                       replaceName(n);
                                                         {if (true) return productionEndTerminal("arglist1EndEnd2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo normalargs(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = argument(true);
                          replaceName(n);
    label_33:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_33;
      }
      jj_consume_token(COMMA);
      n = argument(true);
                                                                               replaceName(n);
    }
                                                                                                   {if (true) return productionEndTerminal("normalargs","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExtraArgValueList(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(MULTIPLY);
    n = test(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("ExtraArgValueList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExtraKeywordValueList(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = power(true);
                       replaceName(n);
    n = test(true);
                                                      replaceName(n);
                                                                        {if (true) return productionEndTerminal("ExtraKeywordValueList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo power(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
      jj_consume_token(POWER);
               {if (true) return productionEndTerminal("power1","-","-","Replacement","Default",first,token);}
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      jj_consume_token(MULTIPLY);
                  {if (true) return productionEndTerminal("power2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo argument(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_20(2)) {
      n = AnyName(true);
                                       replaceName(n);
      jj_consume_token(EQUAL);
    } else {
      ;
    }
    n = test(true);
                                                                           replaceName(n);
                                                                                             {if (true) return productionEndTerminal("argument","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Number(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEXNUMBER:
      jj_consume_token(HEXNUMBER);
                     {if (true) return productionEndTerminal("Number1","-","-","Replacement","Default",first,token);}
      break;
    case OCTNUMBER:
      jj_consume_token(OCTNUMBER);
                     {if (true) return productionEndTerminal("Number2","-","-","Replacement","Default",first,token);}
      break;
    case DECNUMBER:
      jj_consume_token(DECNUMBER);
                     {if (true) return productionEndTerminal("Number3","-","-","Replacement","Default",first,token);}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                 {if (true) return productionEndTerminal("Number4","-","-","Replacement","Default",first,token);}
      break;
    case COMPLEX:
      jj_consume_token(COMPLEX);
                   {if (true) return productionEndTerminal("Number5","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Complex(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FLOAT);
                 {if (true) return productionEndTerminal("Complex","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Name(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(NAME);
                {if (true) return productionEndTerminal("Name","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StringNode(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLE_STRING:
      jj_consume_token(SINGLE_STRING);
                         {if (true) return productionEndTerminal("StringNode1","-","-","Replacement","Default",first,token);}
      break;
    case SINGLE_STRING2:
      jj_consume_token(SINGLE_STRING2);
                          {if (true) return productionEndTerminal("StringNode2","-","-","Replacement","Default",first,token);}
      break;
    case TRIPLE_STRING:
      jj_consume_token(TRIPLE_STRING);
                         {if (true) return productionEndTerminal("StringNode3","-","-","Replacement","Default",first,token);}
      break;
    case TRIPLE_STRING2:
      jj_consume_token(TRIPLE_STRING2);
                          {if (true) return productionEndTerminal("StringNode4","-","-","Replacement","Default",first,token);}
      break;
    case SINGLE_USTRING:
      jj_consume_token(SINGLE_USTRING);
                          {if (true) return productionEndTerminal("StringNode5","-","-","Replacement","Default",first,token);}
      break;
    case SINGLE_USTRING2:
      jj_consume_token(SINGLE_USTRING2);
                           {if (true) return productionEndTerminal("StringNode6","-","-","Replacement","Default",first,token);}
      break;
    case TRIPLE_USTRING:
      jj_consume_token(TRIPLE_USTRING);
                          {if (true) return productionEndTerminal("StringNode7","-","-","Replacement","Default",first,token);}
      break;
    case TRIPLE_USTRING2:
      jj_consume_token(TRIPLE_USTRING2);
                           {if (true) return productionEndTerminal("StringNode8","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo AnyName(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      jj_consume_token(NAME);
                {if (true) return productionEndTerminal("AnyName1","-","-","Replacement","Default",first,token);}
      break;
    case OR_BOOL:
      jj_consume_token(OR_BOOL);
               {if (true) return productionEndTerminal("AnyName2","-","-","Replacement","Default",first,token);}
      break;
    case AND_BOOL:
      jj_consume_token(AND_BOOL);
                {if (true) return productionEndTerminal("AnyName3","-","-","Replacement","Default",first,token);}
      break;
    case NOT_BOOL:
      jj_consume_token(NOT_BOOL);
                {if (true) return productionEndTerminal("AnyName4","-","-","Replacement","Default",first,token);}
      break;
    case IS:
      jj_consume_token(IS);
              {if (true) return productionEndTerminal("AnyName5","-","-","Replacement","Default",first,token);}
      break;
    case IN:
      jj_consume_token(IN);
              {if (true) return productionEndTerminal("AnyName6","-","-","Replacement","Default",first,token);}
      break;
    case LAMBDA:
      jj_consume_token(LAMBDA);
                  {if (true) return productionEndTerminal("AnyName7","-","-","Replacement","Default",first,token);}
      break;
    case IF:
      jj_consume_token(IF);
              {if (true) return productionEndTerminal("AnyName8","-","-","Replacement","Default",first,token);}
      break;
    case ELSE:
      jj_consume_token(ELSE);
                {if (true) return productionEndTerminal("AnyName9","-","-","Replacement","Default",first,token);}
      break;
    case ELIF:
      jj_consume_token(ELIF);
                {if (true) return productionEndTerminal("AnyName10","-","-","Replacement","Default",first,token);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
                 {if (true) return productionEndTerminal("AnyName11","-","-","Replacement","Default",first,token);}
      break;
    case FOR:
      jj_consume_token(FOR);
               {if (true) return productionEndTerminal("AnyName12","-","-","Replacement","Default",first,token);}
      break;
    case TRY:
      jj_consume_token(TRY);
               {if (true) return productionEndTerminal("AnyName13","-","-","Replacement","Default",first,token);}
      break;
    case EXCEPT:
      jj_consume_token(EXCEPT);
                  {if (true) return productionEndTerminal("AnyName14","-","-","Replacement","Default",first,token);}
      break;
    case DEF:
      jj_consume_token(DEF);
               {if (true) return productionEndTerminal("AnyName15","-","-","Replacement","Default",first,token);}
      break;
    case CLASS:
      jj_consume_token(CLASS);
                 {if (true) return productionEndTerminal("AnyName16","-","-","Replacement","Default",first,token);}
      break;
    case FINALLY:
      jj_consume_token(FINALLY);
                   {if (true) return productionEndTerminal("AnyName17","-","-","Replacement","Default",first,token);}
      break;
    case PRINT:
      jj_consume_token(PRINT);
                 {if (true) return productionEndTerminal("AnyName18","-","-","Replacement","Default",first,token);}
      break;
    case PASS:
      jj_consume_token(PASS);
                {if (true) return productionEndTerminal("AnyName19","-","-","Replacement","Default",first,token);}
      break;
    case BREAK:
      jj_consume_token(BREAK);
                 {if (true) return productionEndTerminal("AnyName20","-","-","Replacement","Default",first,token);}
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
                    {if (true) return productionEndTerminal("AnyName21","-","-","Replacement","Default",first,token);}
      break;
    case RETURN:
      jj_consume_token(RETURN);
                  {if (true) return productionEndTerminal("AnyName22","-","-","Replacement","Default",first,token);}
      break;
    case YIELD:
      jj_consume_token(YIELD);
                 {if (true) return productionEndTerminal("AnyName23","-","-","Replacement","Default",first,token);}
      break;
    case LIBRARY:
      jj_consume_token(LIBRARY);
                   {if (true) return productionEndTerminal("AnyName24","-","-","Replacement","Default",first,token);}
      break;
    case FROM:
      jj_consume_token(FROM);
                {if (true) return productionEndTerminal("AnyName25","-","-","Replacement","Default",first,token);}
      break;
    case DEL:
      jj_consume_token(DEL);
               {if (true) return productionEndTerminal("AnyName26","-","-","Replacement","Default",first,token);}
      break;
    case RAISE:
      jj_consume_token(RAISE);
                 {if (true) return productionEndTerminal("AnyName27","-","-","Replacement","Default",first,token);}
      break;
    case GLOBAL:
      jj_consume_token(GLOBAL);
                  {if (true) return productionEndTerminal("AnyName28","-","-","Replacement","Default",first,token);}
      break;
    case EXEC:
      jj_consume_token(EXEC);
                {if (true) return productionEndTerminal("AnyName29","-","-","Replacement","Default",first,token);}
      break;
    case ASSERT:
      jj_consume_token(ASSERT);
                  {if (true) return productionEndTerminal("AnyName30","-","-","Replacement","Default",first,token);}
      break;
    case AS:
      jj_consume_token(AS);
              {if (true) return productionEndTerminal("AnyName31","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo parameters(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case MULTIPLY:
    case POWER:
    case NAME:
      n = varargslist(true);
                                  replaceName("varargslist", n);
                                                                   replaceName(n);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                                          {if (true) return productionEndTerminal("parameters","-","{varargslist}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo varargslist(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case NAME:
      n = defaultarg(true);
                            replaceName(n);
      label_34:
      while (true) {
        if (jj_2_21(2)) {
          ;
        } else {
          break label_34;
        }
        jj_consume_token(COMMA);
        n = defaultarg(true);
                                                                                   replaceName(n);
      }
      if (jj_2_22(3)) {
        jj_consume_token(COMMA);
        n = ExtraArgList(true);
                                                                                                                                              replaceName(n);
      } else {
        ;
      }
      if (jj_2_23(2)) {
        jj_consume_token(COMMA);
        n = ExtraKeywordList(true);
                                                                                                                                                                                                            replaceName(n);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
                                                                                                                                                                                                                                      {if (true) return productionEndTerminal("varargslist1","-","{TOSTRING}","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[82] = jj_gen;
      if (jj_2_24(2)) {
        n = ExtraArgList(true);
                                           replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          n = ExtraKeywordList(true);
                                                                                           replaceName(n);
          break;
        default:
          jj_la1[81] = jj_gen;
          ;
        }
                                                                                                              {if (true) return productionEndTerminal("varargslist2","-","{TOSTRING}","Replacement","Default",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case POWER:
          n = ExtraKeywordList(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("varargslist3","-","{TOSTRING}","Replacement","Default",first,token);}
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExtraArgList(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(MULTIPLY);
    n = Name(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("ExtraArgList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExtraKeywordList(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = power(true);
                       replaceName(n);
    n = Name(true);
                                                      replaceName(n);
                                                                        {if (true) return productionEndTerminal("ExtraKeywordList","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo defaultarg(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = fpdef(true);
                       replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      n = test(true);
                                                           replaceName(n);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
                                                                              {if (true) return productionEndTerminal("defaultarg","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo fpdef(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      n = Name(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("fpdef1","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = fplist(true);
                            replaceName(n);
      jj_consume_token(RPAREN);
                                                  {if (true) return productionEndTerminal("fpdef2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo fplist(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = fpdef(true);
                       replaceName(n);
    label_35:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_35;
      }
      jj_consume_token(COMMA);
      n = fpdef(true);
                                                                         replaceName(n);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
                                                                                                    {if (true) return productionEndTerminal("fplist","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(LIBRARY)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(ASSERT)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(EXEC)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(GLOBAL)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(RAISE)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(DEL)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(LIBRARY)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(YIELD)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(PASS)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(FINALLY)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(DEF)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(EXCEPT)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(IS)) return true;
    if (jj_scan_token(NOT_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(ELIF)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(NOT_BOOL)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_36()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(AND_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(OR_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(TRIPLE_USTRING2)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(TRIPLE_USTRING)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(SINGLE_USTRING2)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(SINGLE_USTRING)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(TRIPLE_STRING2)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(TRIPLE_STRING)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(NOT_BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(SINGLE_STRING2)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(SINGLE_STRING)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(LESSMINUS)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(COMPLEX)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(DECNUMBER)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_36()) return true;
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(OCTNUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(HEXNUMBER)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(131)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_36()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_100()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_40()) return true;
    return false;
  }

  public RParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[87];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x10181500,0x10181500,0x0,0x10181500,0x4000,0x0,0x10181500,0x0,0x0,0x0,0x10181500,0x8000,0x0,0x10000,0x10181500,0x0,0x10181500,0x0,0x0,0x0,0x0,0x101c1500,0x101c1500,0x101c1500,0x0,0x101c1500,0x0,0x101c1500,0x0,0x10181500,0x0,0x10181500,0x0,0x0,0x0,0x40000000,0x20000000,0x80000000,0x6000000,0x6000000,0x180000,0x180000,0x8e00000,0x8e00000,0x10181500,0x11100,0x11100,0x10181500,0x10181500,0x10181500,0x0,0x1500,0x1200100,0x8000,0x8000,0x101b9500,0x20000,0x101b1500,0x20000,0x10181500,0x8000,0x8000,0x8000,0x8000,0x0,0x8000,0x0,0x0,0x0,0x11381700,0x10181500,0x8000,0x10181500,0x8000,0x1200000,0x1200000,0x0,0x0,0x0,0x1200100,0x8000,0x8000,0x100,0x1200000,0x0,0x100,0x8000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x32000000,0x32000000,0x200001,0x32000000,0x0,0x0,0x12000000,0x1,0xfff00,0x0,0x12000000,0x0,0x0,0x0,0x32000000,0x40000000,0x32000000,0x80000000,0x40000000,0x80000000,0x40000000,0x12000000,0x12000000,0x12000000,0x40000000,0x12000000,0x40000000,0x12000000,0x800000,0x12000000,0x1000000,0x2000000,0xe0000fe,0xa0000fe,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12000000,0x12000000,0x12000000,0x0,0x0,0x0,0x0,0x0,0x12000000,0x0,0x12000000,0x0,0x12000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x400000,0xff800000,0x32000000,0x0,0xff800000,0x0,0x0,0x0,0x0,0x0,0xff800000,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x3e802003,0x3e802003,0x0,0x3e802003,0x0,0x2000,0x3e800000,0x0,0x0,0xe00,0x3e800000,0x0,0x100000,0x0,0x3e802003,0x0,0x3e802003,0x0,0x0,0x0,0x0,0x3e802000,0x3e802000,0x3e802000,0x0,0x3e802000,0x0,0x3e802000,0x0,0x3e800000,0x0,0x3e800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e800000,0x0,0x0,0x3e800000,0x3e800000,0x3e800000,0x0,0x3e800000,0x800000,0x0,0x0,0x3e800000,0x0,0x3e800000,0x0,0x3e800000,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x3e9fffff,0x3e802003,0x0,0x3e9fffff,0x0,0x0,0x0,0x3e000000,0x0,0x9fffff,0x800000,0x0,0x0,0x800000,0x0,0x0,0x800000,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0xff00,0xff00,0x0,0xff00,0x0,0x0,0xff00,0x0,0x0,0x0,0xff00,0x0,0x0,0x0,0xff00,0x0,0xff00,0x0,0x0,0x0,0x0,0xff00,0xff00,0xff00,0x0,0xff00,0x0,0xff00,0x0,0xff00,0x0,0xff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff00,0x0,0x0,0xff00,0xff00,0xff00,0xff00,0xff00,0x0,0x0,0x0,0xff00,0x0,0xff00,0x0,0xff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff00,0xff00,0x0,0xff00,0x0,0x0,0x0,0x0,0xff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x8,0x8,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x8,0x0,0x8,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x8,0x8,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[25];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public RParser(CharStream stream) {
    token_source = new RParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RParser(RParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(RParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[132];
    for (int i = 0; i < 132; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 87; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 132; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 25; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
