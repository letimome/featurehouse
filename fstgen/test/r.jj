// -*- java -*-
// Copyright  Corporation for National Research Initiatives

options {
	STATIC = false;                          // multiple parsers
	COMMON_TOKEN_ACTION = false;              // CommonTokenAction(Token)
	USER_CHAR_STREAM = true;
	UNICODE_INPUT = true;
}


PARSER_BEGIN(RParser)

package tmp.generated_r;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class RParser extends AbstractFSTParser {
	public RParser() {}
}

PARSER_END(RParser)



SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}


/*
SKIP: {
	"\t" |
	<NEWLINE1: ("\r\n"|"\n"|"\r")> 
}
/*
<FORCE_NEWLINE1> TOKEN : {
	<NEWLINE: ("\n" | "\r")> 
}

<FORCE_NEWLINE2> TOKEN : {
	<NEWLINE2: ("\n" | "\r")> 
}

<DEFAULT> SKIP: //COMENTS {
	<TRAILING_COMMENT: "#" (~["\n","\r"])*>
}

<INDENTING, INDENTATION_UNCHANGED> SKIP: // COMMENTS  {
	<SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\r\n" | "\n" | "\r")> 
}
*/

<DEFAULT> SKIP: //COMENTS 
{
	<TRAILING_COMMENT: "#" (~["\n","\r"])*>
}

<INDENTING, INDENTATION_UNCHANGED> SKIP: // COMMENTS  
{
	<SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\r\n" | "\n" | "\r")> 
}

TOKEN : // SEPARATORS  
{
	< LPAREN: "(" > 
	|  < RPAREN: ")" > 
	|  < LBRACE: "{" > 
	|  < RBRACE: "}" > 
	|  < LBRACKET: "[" > 
	|  < RBRACKET: "]" > 
	|  < SEMICOLON: ";" >
	|  < COMMA: "," >
	|  < DOT: "." >
	|  < COLON: ":" >
	|  < NEWLINE: ("\n" | "\r")> 

}


TOKEN : /* OPERATORS */ {
	< PLUS: "+" >
	|  < MINUS: "-" >
	|  < MULTIPLY: "*" >
	|  < DIVIDE: "/" >
	|  < FLOORDIVIDE: "//" >
	|  < POWER: "**" >
	|  < LSHIFT: "<<" >
	|  < RSHIFT: ">>" >
	|  < MODULO: "%" >
	|  < NOT: "~" >
	|  < XOR: "^" >
	|  < OR: "|" >
	|  < AND: "&" >
	|  < EQUAL: "=" >
	|  < GREATER: ">" >
	|  < LESS: "<" >
	|  < EQEQUAL: "==" >
	|  < EQLESS: "<=" >
	|  < EQGREATER: ">=" >
	|  < LESSGREATER: "<>" >
	|  < NOTEQUAL: "!=" >
	|  < PLUSEQ: "+=" >
	|  < MINUSEQ: "-=" >
	|  < MULTIPLYEQ: "*=" >
	|  < DIVIDEEQ: "/=" >
	|  < FLOORDIVIDEEQ: "//=" >
	|  < MODULOEQ: "%=" >
	|  < ANDEQ: "&=" >
	|  < OREQ: "|=" >
	|  < XOREQ: "^=" >
	|  < LSHIFTEQ: "<<=" >
	|  < RSHIFTEQ: ">>=" >
	|  < POWEREQ: "**=" >
	|  < DOLAR: "$">
	|  < LESSMINUS: "<-">
	|  < AT: "@">
}

TOKEN : /* KEYWORDS */ {
	< OR_BOOL: "or" >
	|  < AND_BOOL: "and" >
	|  < NOT_BOOL: "not" >
	|  < IS: "is" >
	|  < IN: "in" >
	|  < LAMBDA: "lambda" >
	|  < IF: "if" >
	|  < ELSE: "else" >
	|  < ELIF: "elif" >
	|  < WHILE: "while" >
	|  < FOR: "for" >
	|  < TRY: "try" >
	|  < EXCEPT: "except" >
	|  < DEF: "def" >
	|  < CLASS: "class" >
	|  < FINALLY: "finally" >
	|  < PRINT: "print" >
	|  < PASS: "pass" >
	|  < BREAK: "break" >
	|  < CONTINUE: "continue" >
	|  < RETURN: "return" >
	|  < YIELD: "yield" >
	|  < LIBRARY: "library" >
	|  < FROM: "from" >
	|  < DEL: "del" >
	|  < RAISE: "raise" >
	|  < GLOBAL: "global" >
	|  < EXEC: "exec" >
	|  < ASSERT: "assert" >
	|  < AS: "as" >
	|  < WITH: "with" >
	|  <FUNCTION: "function" >
}


TOKEN : /* R identifiers */ {
	 < NAME: "." (<LETTER>|"_"|".") (<LETTER>|<DIGIT>|"_"|".")*
    |   <LETTER> (<LETTER>|<DIGIT>|"_"|".")*>
    |  < #LETTER: ["$","_","a"-"z","A"-"Z"] > //INCLUIDO EL DOLAR!!!!
}

TOKEN : /* Numeric literals */ {
	< DECNUMBER: ["1"-"9"] (["0"-"9"])* (["l", "L"])? | "0" >
	|  < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
	|  < OCTNUMBER: "0" (["0"-"7"])* (["l","L"])? >
	|  < FLOAT: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
		| "." (["0"-"9"])+ (<EXPONENT>)?
		| (["0"-"9"])+ <EXPONENT> >
	|  < COMPLEX: (<DECNUMBER> | <FLOAT> | "0" <DECNUMBER> ) ["j", "J"] >
	|  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	|  < #DIGIT: ["0" - "9"] >
}

/*TOKEN : { <STRING: (["r", "R"])? ["'", "\"", "'''", "\"\"\""] >
    {
        int nquotes = matchedToken.image.length() > 2 ? 3 : 1;
        char quote = matchedToken.image.charAt(matchedToken.image.length()-1);

    }
}*/


MORE : /* Strings */ {
	< (["u", "U"]) (["r", "R"])? "'" > :  IN_USTRING11
	|  < (["u", "U"]) (["r", "R"])? "\"" > :  IN_USTRING21
	|  < (["u", "U"]) (["r", "R"])? "'''" > :  IN_USTRING13
	|  < (["u", "U"]) (["r", "R"])? "\"\"\"" > :  IN_USTRING23
	|  < (["r", "R"])? "'" > :  IN_STRING11
	|  < (["r", "R"])? "\"" > :  IN_STRING21
	|  < (["r", "R"])? "'''" > :  IN_STRING13
	|  < (["r", "R"])? "\"\"\"" > :  IN_STRING23
}

<IN_STRING11> TOKEN : { <SINGLE_STRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING21> TOKEN : { <SINGLE_STRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING13> TOKEN : { <TRIPLE_STRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_STRING23> TOKEN : { <TRIPLE_STRING2: "\"\"\""> {
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_USTRING11> TOKEN : { <SINGLE_USTRING: "'"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING21> TOKEN : { <SINGLE_USTRING2: "\""> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING13> TOKEN : { <TRIPLE_USTRING: "'''"> {
    matchedToken.image = image.toString(); } : DEFAULT}
<IN_USTRING23> TOKEN : { <TRIPLE_USTRING2: "\"\"\""> {
    matchedToken.image = image.toString(); } : DEFAULT}

<IN_STRING11> MORE: {
	<"\\\r\n">           { image.setLength(image.length()-3); } : IN_STRING1NLC
	|  <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_STRING1NLC
}

<IN_STRING21> MORE: {
	<"\\\r\n">           { image.setLength(image.length()-3); } : IN_STRING2NLC
	|  <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_STRING2NLC
}

<IN_USTRING11> MORE: {
	<"\\\r\n">           { image.setLength(image.length()-3); } : IN_USTRING1NLC
	|  <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_USTRING1NLC
}

<IN_USTRING21> MORE: {
	<"\\\r\n">           { image.setLength(image.length()-3); } : IN_USTRING2NLC
	|  <("\\" ("\n"|"\r"))> { image.setLength(image.length()-2); } : IN_USTRING2NLC
}

<IN_STRING1NLC> MORE: {
	<""> : IN_STRING11
}

<IN_STRING2NLC> MORE: {
	<""> : IN_STRING21
}

<IN_USTRING1NLC> MORE: {
	<""> : IN_USTRING11
}

<IN_USTRING2NLC> MORE: {
	<""> : IN_USTRING21
}

<IN_STRING11, IN_USTRING11> MORE: {
	<("\\" ("\\"|"'")) | ~["\n","\r"]>
}

<IN_STRING21, IN_USTRING21> MORE: {
	<("\\" ("\\"|"\"")) | ~["\n","\r"]>
}

<IN_STRING13, IN_STRING23, IN_USTRING13, IN_USTRING23> MORE: {
	<"\r\n"> {
		int l = image.length();
		image.setLength(l-1);
		image.setCharAt(l-2, '\n');
	}
	|  <"\n">
	|  <"\r"> { image.setCharAt(image.length()-1, '\n'); }
	|  <~["\n","\r"]>
	|  <"\\" ~["\n","\r"]>
}
FSTInfo file_input(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=stmt(inTerminal){ replaceName(n);})* <EOF> {return productionEndNonTerminal("file_input","-","-");}

 )  }

FSTInfo stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Name() assignType() function()) n=funcdef(true){ replaceName("funcdef", n);}{ replaceName(n);} {return productionEndTerminal("FunctionDefinition","{funcdef}","{funcdef}","JavaMethodOverriding","Default",first,token);}
 |
	n=simple_stmt(inTerminal){ replaceName("simple_stmt", n);}{ replaceName(n);} {return productionEndNonTerminal("stmt2","{simple_stmt}","{simple_stmt}");}
 |
	n=if_stmt(true){ replaceName(n);} {return productionEndTerminal("stmt3","{AUTO}","{AUTO}","Replacement","SemanticConflict",first,token);}
 |
	n=while_stmt(true){ replaceName(n);} {return productionEndTerminal("stmt4","{AUTO}","{AUTO}","Replacement","SemanticConflict",first,token);}
 |
	n=for_stmt(true){ replaceName(n);} {return productionEndTerminal("stmt5","{AUTO}","{AUTO}","Replacement","SemanticConflict",first,token);}

 )  }

FSTInfo funcdef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<NAME>{ replaceName(new FSTInfo("<NAME>",t.image));} n=assignType(true){ replaceName(n);} <FUNCTION> n=parameters(true){ replaceName("parameters", n);}{ replaceName(n);} n=function_body(true){ replaceName(n);} {return productionEndTerminal("funcdef","-","{<NAME>} ({parameters}) ","Replacement","Default",first,token);}

 )  }

FSTInfo assignType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"="  {return productionEndTerminal("assignType1","-","-","Replacement","Default",first,token);}
 |
	"<-"  {return productionEndTerminal("assignType2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo function(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FUNCTION> {return productionEndTerminal("function","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo function_body(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=stmt(true){ replaceName(n);})* "}" {return productionEndTerminal("function_body","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo simple_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=small_stmt(inTerminal){ replaceName("small_stmt", n);}{ replaceName(n);} (LOOKAHEAD(2) ";" n=small_stmt(inTerminal){ replaceName("small_stmt", n);}{ replaceName(n);})* [";" ] {return productionEndNonTerminal("simple_stmt","{small_stmt}","{small_stmt}");}

 )  }

FSTInfo small_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=import_stmt(true){ replaceName(n);} {return productionEndTerminal("small_stmt1","{TOSTRING}","{TOSTRING}","Replacement","SemanticConflict",first,token);}
 |
	LOOKAHEAD(Name() assignType()) n=assignment_stmt(true){ replaceName("assignment_stmt", n);}{ replaceName(n);} {return productionEndTerminal("small_stmt2","{assignment_stmt}","{assignment_stmt}","Replacement","SemanticConflict",first,token);}
 |
	n=expr_stmt(true){ replaceName("expr_stmt", n);}{ replaceName(n);} {return productionEndTerminal("small_stmt3","{expr_stmt}","{expr_stmt}","Replacement","SemanticConflict",first,token);}

 )  }

FSTInfo assignment_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<NAME>{ replaceName(new FSTInfo("<NAME>",t.image));} n=assignType(true){ replaceName(n);} n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("assignment_stmt","-","{<NAME>}","Replacement","Default",first,token);}

 )  }

FSTInfo expr_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SmartTestList(true){ replaceName("SmartTestList", n);}{ replaceName(n);} n=expr_stmtEnd(true){ replaceName(n);} {return productionEndTerminal("expr_stmt","-","{SmartTestList}","Replacement","Default",first,token);}

 )  }

FSTInfo expr_stmtEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<PLUSEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd1","-","-","Replacement","Default",first,token);}
 |
	<MINUSEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd2","-","-","Replacement","Default",first,token);}
 |
	<MULTIPLYEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd3","-","-","Replacement","Default",first,token);}
 |
	<DIVIDEEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd4","-","-","Replacement","Default",first,token);}
 |
	<FLOORDIVIDEEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd5","-","-","Replacement","Default",first,token);}
 |
	<MODULOEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd6","-","-","Replacement","Default",first,token);}
 |
	<ANDEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd7","-","-","Replacement","Default",first,token);}
 |
	<OREQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd8","-","-","Replacement","Default",first,token);}
 |
	<XOREQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd9","-","-","Replacement","Default",first,token);}
 |
	<LSHIFTEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd10","-","-","Replacement","Default",first,token);}
 |
	<RSHIFTEQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd11","-","-","Replacement","Default",first,token);}
 |
	<POWEREQ> n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("expr_stmtEnd12","-","-","Replacement","Default",first,token);}
 |
	("=" n=SmartTestList(true){ replaceName(n);})* {return productionEndTerminal("expr_stmtEnd13","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo flow_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<BREAK> {return productionEndTerminal("flow_stmt1","-","-","Replacement","Default",first,token);}
 |
	<CONTINUE> {return productionEndTerminal("flow_stmt2","-","-","Replacement","Default",first,token);}
 |
	n=return_stmt(true){ replaceName(n);} {return productionEndTerminal("flow_stmt3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo return_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<RETURN> [n=SmartTestList(true){ replaceName(n);}] {return productionEndTerminal("return_stmt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo testcommatest(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=test(true){ replaceName(n);} ["," n=test(true){ replaceName(n);}] {return productionEndTerminal("testcommatest","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo import_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"library" "(" n=Name(true){ replaceName(n);} ")" {return productionEndTerminal("import_stmt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo dotted_as_name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=dotted_name(true){ replaceName(n);} ["as" n=Name(true){ replaceName(n);}] {return productionEndTerminal("dotted_as_name","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo dotted_name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AnyName(true){ replaceName(n);} ("." n=AnyName(true){ replaceName(n);})* {return productionEndTerminal("dotted_name","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo if_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"if" "(" n=expr_stmt(true){ replaceName(n);} ")" "{" (n=stmt(true){ replaceName(n);})* "}" [n=else_clause(true){ replaceName(n);}] {return productionEndTerminal("if_stmt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo else_clause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"else" "{" (n=stmt(true){ replaceName(n);})* "}" {return productionEndTerminal("else_clause","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo if_stmt_End(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=small_stmt(true){ replaceName(n);} (n=elif_stmt(true){ replaceName(n);})* [n=else_stmt(true){ replaceName(n);}] {return productionEndTerminal("if_stmt_End1","-","-","Replacement","Default",first,token);}
 |
	n=suite(true){ replaceName(n);} (n=elif_stmt(true){ replaceName(n);})* [n=else_stmt(true){ replaceName(n);}] {return productionEndTerminal("if_stmt_End2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo elif_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"elif" n=test(true){ replaceName(n);} ":" n=elif_stmt_End(true){ replaceName(n);} {return productionEndTerminal("elif_stmt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo elif_stmt_End(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=small_stmt(true){ replaceName(n);} {return productionEndTerminal("elif_stmt_End1","-","-","Replacement","Default",first,token);}
 |
	n=suite(true){ replaceName(n);} {return productionEndTerminal("elif_stmt_End2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo else_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"else" ":" n=else_stmt_End(true){ replaceName(n);} {return productionEndTerminal("else_stmt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo else_stmt_End(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=small_stmt(true){ replaceName(n);} {return productionEndTerminal("else_stmt_End1","-","-","Replacement","Default",first,token);}
 |
	n=suite(true){ replaceName(n);} {return productionEndTerminal("else_stmt_End2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo while_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"while" n=test(true){ replaceName(n);} ":" n=while_stmt_End(true){ replaceName(n);} {return productionEndTerminal("while_stmt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo while_stmt_End(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=small_stmt(true){ replaceName(n);} {return productionEndTerminal("while_stmt_End1","-","-","Replacement","Default",first,token);}
 |
	n=suite(true){ replaceName(n);} [n=else_stmt(true){ replaceName(n);}] {return productionEndTerminal("while_stmt_End2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo for_stmt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"for" n=exprlist(true){ replaceName(n);} "in" n=SmartTestList(true){ replaceName(n);} ":" n=for_stmt_End(true){ replaceName(n);} {return productionEndTerminal("for_stmt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo for_stmt_End(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=small_stmt(true){ replaceName(n);} {return productionEndTerminal("for_stmt_End1","-","-","Replacement","Default",first,token);}
 |
	n=suite(true){ replaceName(n);} [n=else_stmt(true){ replaceName(n);}] {return productionEndTerminal("for_stmt_End2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo test(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=lambdef(true){ replaceName(n);} {return productionEndTerminal("test1","-","-","Replacement","Default",first,token);}
 |
	n=and_test(true){ replaceName(n);} ("or" n=and_test(true){ replaceName(n);})* {return productionEndTerminal("test2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo and_test(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=not_test(true){ replaceName(n);} ("and" n=not_test(true){ replaceName(n);})* {return productionEndTerminal("and_test","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo not_test(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"not" n=not_test(true){ replaceName(n);} {return productionEndTerminal("not_test1","-","-","Replacement","Default",first,token);}
 |
	n=comparison(true){ replaceName(n);} {return productionEndTerminal("not_test2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo comparison(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=expr(true){ replaceName(n);} (n=compEnd(true){ replaceName(n);})* {return productionEndTerminal("comparison","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo compEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=comp_op(true){ replaceName(n);} n=expr(true){ replaceName(n);} {return productionEndTerminal("compEnd","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo comp_op(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LESS> {return productionEndTerminal("comp_op1","-","-","Replacement","Default",first,token);}
 |
	<GREATER> {return productionEndTerminal("comp_op2","-","-","Replacement","Default",first,token);}
 |
	<EQEQUAL> {return productionEndTerminal("comp_op3","-","-","Replacement","Default",first,token);}
 |
	<EQGREATER> {return productionEndTerminal("comp_op4","-","-","Replacement","Default",first,token);}
 |
	<EQLESS> {return productionEndTerminal("comp_op5","-","-","Replacement","Default",first,token);}
 |
	<LESSGREATER> {return productionEndTerminal("comp_op6","-","-","Replacement","Default",first,token);}
 |
	<NOTEQUAL> {return productionEndTerminal("comp_op7","-","-","Replacement","Default",first,token);}
 |
	<IN> {return productionEndTerminal("comp_op8","-","-","Replacement","Default",first,token);}
 |
	"not" <IN> {return productionEndTerminal("comp_op9","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) <IS> "not" {return productionEndTerminal("comp_op10","-","-","Replacement","Default",first,token);}
 |
	<IS> {return productionEndTerminal("comp_op11","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo expr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=xor_expr(true){ replaceName(n);} ("|" n=xor_expr(true){ replaceName(n);})* {return productionEndTerminal("expr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo xor_expr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=and_expr(true){ replaceName(n);} ("^" n=and_expr(true){ replaceName(n);})* {return productionEndTerminal("xor_expr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo and_expr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=shift_expr(true){ replaceName(n);} ("&" n=shift_expr(true){ replaceName(n);})* {return productionEndTerminal("and_expr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo shift_expr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=arith_expr(true){ replaceName(n);} (n=shift_exprEnd(true){ replaceName(n);})* {return productionEndTerminal("shift_expr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo shift_exprEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<<" n=arith_expr(true){ replaceName(n);} {return productionEndTerminal("shift_exprEnd1","-","-","Replacement","Default",first,token);}
 |
	">>" n=arith_expr(true){ replaceName(n);} {return productionEndTerminal("shift_exprEnd2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo arith_expr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=term(true){ replaceName(n);} (n=arith_exprEnd(true){ replaceName(n);})* {return productionEndTerminal("arith_expr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo arith_exprEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<PLUS> n=term(true){ replaceName(n);} {return productionEndTerminal("arith_exprEnd1","-","-","Replacement","Default",first,token);}
 |
	<MINUS> n=term(true){ replaceName(n);} {return productionEndTerminal("arith_exprEnd2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo term(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=factor(true){ replaceName(n);} (n=termEnd(true){ replaceName(n);})* {return productionEndTerminal("term","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo termEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"*" n=factor(true){ replaceName(n);} {return productionEndTerminal("termEnd1","-","-","Replacement","Default",first,token);}
 |
	<DIVIDE> n=factor(true){ replaceName(n);} {return productionEndTerminal("termEnd2","-","-","Replacement","Default",first,token);}
 |
	<FLOORDIVIDE> n=factor(true){ replaceName(n);} {return productionEndTerminal("termEnd3","-","-","Replacement","Default",first,token);}
 |
	<MODULO> n=factor(true){ replaceName(n);} {return productionEndTerminal("termEnd4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo factor(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<PLUS> n=factor(true){ replaceName(n);} {return productionEndTerminal("factor1","-","-","Replacement","Default",first,token);}
 |
	<MINUS> n=factor(true){ replaceName(n);} {return productionEndTerminal("factor2","-","-","Replacement","Default",first,token);}
 |
	<NOT> n=factor(true){ replaceName(n);} {return productionEndTerminal("factor3","-","-","Replacement","Default",first,token);}
 |
	n=powerfactor(true){ replaceName(n);} {return productionEndTerminal("factor4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo powerfactor(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=atomtrailer(true){ replaceName(n);} (LOOKAHEAD(2) "**" n=factor(true){ replaceName(n);})* {return productionEndTerminal("powerfactor","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo atomtrailer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=atom(true){ replaceName(n);} (n=atomtrailerEnd(true){ replaceName(n);})* {return productionEndTerminal("atomtrailer","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo atomtrailerEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "(" ")"  {return productionEndTerminal("atomtrailerEnd1","-","-","Replacement","Default",first,token);}
 |
	"(" n=arglist(true){ replaceName(n);} ")" {return productionEndTerminal("atomtrailerEnd2","-","-","Replacement","Default",first,token);}
 |
	"[" n=subscriptlist(true){ replaceName(n);} "]" {return productionEndTerminal("atomtrailerEnd3","-","-","Replacement","Default",first,token);}
 |
	<DOT> n=AnyName(true){ replaceName(n);} {return productionEndTerminal("atomtrailerEnd4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo atom(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "(" ")"  {return productionEndTerminal("atom1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) n=Name(true){ replaceName(n);} "=" n=test(true){ replaceName(n);} {return productionEndTerminal("atom2","-","-","Replacement","Default",first,token);}
 |
	"(" [n=SmartTestList(true){ replaceName(n);}] ")" {return productionEndTerminal("atom3","-","-","Replacement","Default",first,token);}
 |
	<LBRACKET> [n=listmaker(true){ replaceName(n);}] "]" {return productionEndTerminal("atom4","-","-","Replacement","Default",first,token);}
 |
	"{" [n=dictmaker(true){ replaceName(n);}] "}" {return productionEndTerminal("atom5","-","-","Replacement","Default",first,token);}
 |
	"`" n=SmartTestList(true){ replaceName(n);} "`" {return productionEndTerminal("atom6","-","-","Replacement","Default",first,token);}
 |
	n=Name(true){ replaceName(n);} {return productionEndTerminal("atom7","-","-","Replacement","Default",first,token);}
 |
	n=Number(true){ replaceName(n);} {return productionEndTerminal("atom8","-","-","Replacement","Default",first,token);}
 |
	n=StringNode(true){ replaceName(n);} (n=StringNode(true){ replaceName(n);})* {return productionEndTerminal("atom9","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo lambdef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<LAMBDA> [n=varargslist(true){ replaceName(n);}] ":" n=test(true){ replaceName(n);} {return productionEndTerminal("lambdef","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo subscriptlist(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=subscript(true){ replaceName(n);} (LOOKAHEAD(2) "," n=subscript(true){ replaceName(n);})* ["," ] {return productionEndTerminal("subscriptlist1","-","-","Replacement","Default",first,token);}
 |
	"," n=subscript(true){ replaceName(n);} (LOOKAHEAD(2) "," n=subscript(true){ replaceName(n);})* ["," ] {return productionEndTerminal("subscriptlist2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo subscript(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<DOT> <DOT> <DOT> {return productionEndTerminal("subscript1","-","-","Replacement","Default",first,token);}
 |
	n=test(true){ replaceName(n);} [n=slice(true){ replaceName(n);}] {return productionEndTerminal("subscript2","-","-","Replacement","Default",first,token);}
 |
	n=slice(true){ replaceName(n);} {return productionEndTerminal("subscript3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo slice(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ct(true){ replaceName(n);} [n=ct(true){ replaceName(n);}] {return productionEndTerminal("slice","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ct(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	":" [n=test(true){ replaceName(n);}] {return productionEndTerminal("ct","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo exprlist(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=expr(true){ replaceName(n);} (LOOKAHEAD(2) "," n=expr(true){ replaceName(n);})* ["," ] {return productionEndTerminal("exprlist","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SmartTestList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=test(true){ replaceName(n);} (LOOKAHEAD(2) "," n=test(true){ replaceName(n);})* ["," ] {return productionEndTerminal("SmartTestList","-","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo testlist(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=test(true){ replaceName(n);} (LOOKAHEAD(2) "," n=test(true){ replaceName(n);})* ["," ] {return productionEndTerminal("testlist","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo dictmaker(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=test(true){ replaceName(n);} ":" n=test(true){ replaceName(n);} (LOOKAHEAD(2) n=dictInt(true){ replaceName(n);})* ["," ] {return productionEndTerminal("dictmaker","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo dictInt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"," n=test(true){ replaceName(n);} ":" n=test(true){ replaceName(n);} {return productionEndTerminal("dictInt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo listmaker(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=test(true){ replaceName(n);} n=listmakerEnd(true){ replaceName(n);} {return productionEndTerminal("listmaker","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo listmakerEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=list_for(true){ replaceName(n);})+ {return productionEndTerminal("listmakerEnd1","-","-","Replacement","Default",first,token);}
 |
	(LOOKAHEAD(2) "," n=test(true){ replaceName(n);})* ["," ] {return productionEndTerminal("listmakerEnd2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo list_for(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"for" n=exprlist(true){ replaceName(n);} "in" n=SmartTestList(true){ replaceName(n);} (n=list_if(true){ replaceName(n);})* {return productionEndTerminal("list_for","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo list_if(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"if" n=test(true){ replaceName(n);} {return productionEndTerminal("list_if","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo decorators(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=decorator(true){ replaceName(n);})+ {return productionEndTerminal("decorators","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo decorator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=dotted_name(true){ replaceName(n);} n=decorator_End(true){ replaceName(n);} {return productionEndTerminal("decorator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo decorator_End(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=decorator_End_Par(true){ replaceName(n);} {return productionEndTerminal("decorator_End","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo decorator_End_Par(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(1) ")"  <NEWLINE> {return productionEndTerminal("decorator_End_Par1","-","-","Replacement","Default",first,token);}
 |
	n=arglist(true){ replaceName(n);} ")"  <NEWLINE> {return productionEndTerminal("decorator_End_Par2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Field(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<NAME>{ replaceName(new FSTInfo("<NAME>",t.image));} "=" n=SmartTestList(true){ replaceName(n);} {return productionEndTerminal("Field","-","{<NAME>}","Replacement","Default",first,token);}

 )  }

FSTInfo suite(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NEWLINE> (n=stmt(true){ replaceName(n);})+ {return productionEndTerminal("suite","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo arglist(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=normalargs(true){ replaceName(n);} [n=arglist1End(true){ replaceName(n);}] {return productionEndTerminal("arglist1","-","-","Replacement","Default",first,token);}
 |
	[LOOKAHEAD(2) n=arglist1EndEnd(true){ replaceName(n);}] {return productionEndTerminal("arglist2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo arglist1End(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"," [LOOKAHEAD(2) n=arglist1EndEnd(true){ replaceName(n);}] {return productionEndTerminal("arglist1End","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo arglist1EndEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=ExtraArgValueList(true){ replaceName(n);} ["," n=ExtraKeywordValueList(true){ replaceName(n);}] {return productionEndTerminal("arglist1EndEnd1","-","-","Replacement","Default",first,token);}
 |
	n=ExtraKeywordValueList(true){ replaceName(n);} {return productionEndTerminal("arglist1EndEnd2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo normalargs(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=argument(true){ replaceName(n);} (LOOKAHEAD(2) "," n=argument(true){ replaceName(n);})* {return productionEndTerminal("normalargs","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExtraArgValueList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"*" n=test(true){ replaceName(n);} {return productionEndTerminal("ExtraArgValueList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExtraKeywordValueList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=power(true){ replaceName(n);} n=test(true){ replaceName(n);} {return productionEndTerminal("ExtraKeywordValueList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo power(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"**"  {return productionEndTerminal("power1","-","-","Replacement","Default",first,token);}
 |
	"*" "*"  {return productionEndTerminal("power2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo argument(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(2) n=AnyName(true){ replaceName(n);} "="] n=test(true){ replaceName(n);} {return productionEndTerminal("argument","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Number(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<HEXNUMBER> {return productionEndTerminal("Number1","-","-","Replacement","Default",first,token);}
 |
	<OCTNUMBER> {return productionEndTerminal("Number2","-","-","Replacement","Default",first,token);}
 |
	<DECNUMBER> {return productionEndTerminal("Number3","-","-","Replacement","Default",first,token);}
 |
	<FLOAT> {return productionEndTerminal("Number4","-","-","Replacement","Default",first,token);}
 |
	<COMPLEX> {return productionEndTerminal("Number5","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Complex(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FLOAT> {return productionEndTerminal("Complex","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NAME> {return productionEndTerminal("Name","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StringNode(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<SINGLE_STRING> {return productionEndTerminal("StringNode1","-","-","Replacement","Default",first,token);}
 |
	<SINGLE_STRING2> {return productionEndTerminal("StringNode2","-","-","Replacement","Default",first,token);}
 |
	<TRIPLE_STRING> {return productionEndTerminal("StringNode3","-","-","Replacement","Default",first,token);}
 |
	<TRIPLE_STRING2> {return productionEndTerminal("StringNode4","-","-","Replacement","Default",first,token);}
 |
	<SINGLE_USTRING> {return productionEndTerminal("StringNode5","-","-","Replacement","Default",first,token);}
 |
	<SINGLE_USTRING2> {return productionEndTerminal("StringNode6","-","-","Replacement","Default",first,token);}
 |
	<TRIPLE_USTRING> {return productionEndTerminal("StringNode7","-","-","Replacement","Default",first,token);}
 |
	<TRIPLE_USTRING2> {return productionEndTerminal("StringNode8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AnyName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NAME> {return productionEndTerminal("AnyName1","-","-","Replacement","Default",first,token);}
 |
	"or"  {return productionEndTerminal("AnyName2","-","-","Replacement","Default",first,token);}
 |
	"and"  {return productionEndTerminal("AnyName3","-","-","Replacement","Default",first,token);}
 |
	"not"  {return productionEndTerminal("AnyName4","-","-","Replacement","Default",first,token);}
 |
	<IS> {return productionEndTerminal("AnyName5","-","-","Replacement","Default",first,token);}
 |
	<IN> {return productionEndTerminal("AnyName6","-","-","Replacement","Default",first,token);}
 |
	<LAMBDA> {return productionEndTerminal("AnyName7","-","-","Replacement","Default",first,token);}
 |
	<IF> {return productionEndTerminal("AnyName8","-","-","Replacement","Default",first,token);}
 |
	<ELSE> {return productionEndTerminal("AnyName9","-","-","Replacement","Default",first,token);}
 |
	<ELIF> {return productionEndTerminal("AnyName10","-","-","Replacement","Default",first,token);}
 |
	<WHILE> {return productionEndTerminal("AnyName11","-","-","Replacement","Default",first,token);}
 |
	<FOR> {return productionEndTerminal("AnyName12","-","-","Replacement","Default",first,token);}
 |
	<TRY> {return productionEndTerminal("AnyName13","-","-","Replacement","Default",first,token);}
 |
	<EXCEPT> {return productionEndTerminal("AnyName14","-","-","Replacement","Default",first,token);}
 |
	<DEF> {return productionEndTerminal("AnyName15","-","-","Replacement","Default",first,token);}
 |
	<CLASS> {return productionEndTerminal("AnyName16","-","-","Replacement","Default",first,token);}
 |
	<FINALLY> {return productionEndTerminal("AnyName17","-","-","Replacement","Default",first,token);}
 |
	<PRINT> {return productionEndTerminal("AnyName18","-","-","Replacement","Default",first,token);}
 |
	<PASS> {return productionEndTerminal("AnyName19","-","-","Replacement","Default",first,token);}
 |
	<BREAK> {return productionEndTerminal("AnyName20","-","-","Replacement","Default",first,token);}
 |
	<CONTINUE> {return productionEndTerminal("AnyName21","-","-","Replacement","Default",first,token);}
 |
	<RETURN> {return productionEndTerminal("AnyName22","-","-","Replacement","Default",first,token);}
 |
	<YIELD> {return productionEndTerminal("AnyName23","-","-","Replacement","Default",first,token);}
 |
	<LIBRARY> {return productionEndTerminal("AnyName24","-","-","Replacement","Default",first,token);}
 |
	<FROM> {return productionEndTerminal("AnyName25","-","-","Replacement","Default",first,token);}
 |
	<DEL> {return productionEndTerminal("AnyName26","-","-","Replacement","Default",first,token);}
 |
	<RAISE> {return productionEndTerminal("AnyName27","-","-","Replacement","Default",first,token);}
 |
	<GLOBAL> {return productionEndTerminal("AnyName28","-","-","Replacement","Default",first,token);}
 |
	<EXEC> {return productionEndTerminal("AnyName29","-","-","Replacement","Default",first,token);}
 |
	<ASSERT> {return productionEndTerminal("AnyName30","-","-","Replacement","Default",first,token);}
 |
	<AS> {return productionEndTerminal("AnyName31","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo parameters(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=varargslist(true){ replaceName("varargslist", n);}{ replaceName(n);}] ")" {return productionEndTerminal("parameters","-","{varargslist}","Replacement","Default",first,token);}

 )  }

FSTInfo varargslist(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=defaultarg(true){ replaceName(n);} (LOOKAHEAD(2) "," n=defaultarg(true){ replaceName(n);})* [LOOKAHEAD(3) "," n=ExtraArgList(true){ replaceName(n);}] [LOOKAHEAD(2) "," n=ExtraKeywordList(true){ replaceName(n);}] ["," ] {return productionEndTerminal("varargslist1","-","{TOSTRING}","Replacement","Default",first,token);}
 |
	LOOKAHEAD(2) n=ExtraArgList(true){ replaceName(n);} ["," n=ExtraKeywordList(true){ replaceName(n);}] {return productionEndTerminal("varargslist2","-","{TOSTRING}","Replacement","Default",first,token);}
 |
	n=ExtraKeywordList(true){ replaceName(n);} {return productionEndTerminal("varargslist3","-","{TOSTRING}","Replacement","Default",first,token);}

 )  }

FSTInfo ExtraArgList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"*" n=Name(true){ replaceName(n);} {return productionEndTerminal("ExtraArgList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ExtraKeywordList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=power(true){ replaceName(n);} n=Name(true){ replaceName(n);} {return productionEndTerminal("ExtraKeywordList","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo defaultarg(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=fpdef(true){ replaceName(n);} ["=" n=test(true){ replaceName(n);}] {return productionEndTerminal("defaultarg","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo fpdef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Name(true){ replaceName(n);} {return productionEndTerminal("fpdef1","-","-","Replacement","Default",first,token);}
 |
	"(" n=fplist(true){ replaceName(n);} ")" {return productionEndTerminal("fpdef2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo fplist(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=fpdef(true){ replaceName(n);} (LOOKAHEAD(2) "," n=fpdef(true){ replaceName(n);})* ["," ] {return productionEndTerminal("fplist","-","-","Replacement","Default",first,token);}

 )  }

